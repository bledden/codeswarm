#!/usr/bin/env python3
"""
Extract CodeSwarm generated code and set up runnable project
Usage: python3 extract_and_launch.py <output_directory>
Example: python3 extract_and_launch.py output/code_20251018_233128
"""

import os
import sys
import subprocess
import re
from pathlib import Path

def extract_files(implementation_file, output_dir):
    """Extract files from implementation.js into proper project structure"""

    print(f"📂 Reading {implementation_file}...")
    with open(implementation_file, 'r') as f:
        content = f.read()

    # Find all file markers (case-insensitive for File/file)
    file_pattern = r'^(?://|#)\s*[Ff]ile:\s*(.+?)$'
    files = re.findall(file_pattern, content, re.MULTILINE)

    print(f"📝 Found {len(files)} files to extract")

    # Split content by file markers
    sections = re.split(r'^(?://|#)\s*[Ff]ile:\s*.+?$', content, flags=re.MULTILINE)

    # Skip the header (before first file marker)
    sections = sections[1:]

    if len(files) != len(sections):
        print(f"⚠️  Warning: {len(files)} files but {len(sections)} sections")

    extracted_count = 0
    for filename, file_content in zip(files, sections):
        # Clean up content
        file_content = file_content.strip()

        # Remove markdown code fences if present
        if file_content.startswith('```') or file_content.startswith('tsx'):
            lines = file_content.split('\n')
            # Remove first line if it's tsx, javascript, json, etc
            if lines[0].strip() in ['tsx', 'typescript', 'javascript', 'json', '```tsx', '```javascript', '```json', '```']:
                lines = lines[1:]
            # Remove last line if it's closing fence
            if lines and lines[-1].strip() == '```':
                lines = lines[:-1]
            file_content = '\n'.join(lines)

        # Create full path
        full_path = output_dir / filename

        # Create parent directories
        full_path.parent.mkdir(parents=True, exist_ok=True)

        # Write file
        with open(full_path, 'w') as f:
            f.write(file_content)

        print(f"  ✅ {filename}")
        extracted_count += 1

    print(f"\n✨ Extracted {extracted_count} files to {output_dir}/")
    return extracted_count

def setup_project(project_dir):
    """Run npm install and setup project"""

    print("\n📦 Installing dependencies...")

    # Check if package.json exists
    package_json = project_dir / "package.json"
    if not package_json.exists():
        print("❌ No package.json found!")
        return False

    try:
        # Run npm install
        result = subprocess.run(
            ["npm", "install"],
            cwd=project_dir,
            capture_output=True,
            text=True,
            timeout=300
        )

        if result.returncode == 0:
            print("✅ Dependencies installed successfully!")
            return True
        else:
            print(f"❌ npm install failed:\n{result.stderr}")
            return False

    except subprocess.TimeoutExpired:
        print("❌ npm install timed out (5 minutes)")
        return False
    except FileNotFoundError:
        print("❌ npm not found. Please install Node.js first.")
        print("   Visit: https://nodejs.org/")
        return False

def create_launch_script(project_dir, project_name):
    """Create a launch script for easy startup"""

    launch_script = project_dir / "launch.sh"

    script_content = f"""#!/bin/bash
# Launch script for {project_name}
# Generated by CodeSwarm

echo "🚀 Starting {project_name}..."
echo ""

cd "$(dirname "$0")"

# Check if dependencies are installed
if [ ! -d "node_modules" ]; then
    echo "📦 Installing dependencies..."
    npm install
fi

echo "🌐 Starting development server..."
echo "📍 Project will be available at: http://localhost:3000"
echo ""
echo "Press Ctrl+C to stop the server"
echo ""

npm run dev
"""

    with open(launch_script, 'w') as f:
        f.write(script_content)

    # Make executable
    os.chmod(launch_script, 0o755)

    print(f"\n📝 Created launch script: {launch_script}")

def main():
    if len(sys.argv) < 2:
        print("Usage: python3 extract_and_launch.py <output_directory>")
        print("Example: python3 extract_and_launch.py output/code_20251018_233128")
        sys.exit(1)

    # Get the output directory
    output_path = Path(sys.argv[1])

    if not output_path.exists():
        print(f"❌ Directory not found: {output_path}")
        sys.exit(1)

    # Find implementation.js
    impl_file = output_path / "implementation.js"
    if not impl_file.exists():
        print(f"❌ implementation.js not found in {output_path}")
        sys.exit(1)

    # Create project directory
    project_name = output_path.name.replace('code_', 'project_')
    project_dir = output_path.parent / project_name

    print("=" * 60)
    print("🎨 CodeSwarm - Extract & Launch")
    print("=" * 60)
    print(f"Source: {impl_file}")
    print(f"Target: {project_dir}")
    print("=" * 60)
    print()

    # Create project directory
    project_dir.mkdir(exist_ok=True)

    # Extract files
    extracted = extract_files(impl_file, project_dir)

    if extracted == 0:
        print("❌ No files extracted")
        sys.exit(1)

    # Setup project
    success = setup_project(project_dir)

    # Create launch script
    create_launch_script(project_dir, project_name)

    # Print final instructions
    print("\n" + "=" * 60)
    print("✅ PROJECT READY!")
    print("=" * 60)
    print(f"\n📁 Project location: {project_dir}")
    print(f"\n🚀 To launch the project:\n")
    print(f"   cd {project_dir}")
    print(f"   ./launch.sh")
    print(f"\n   OR manually:")
    print(f"   npm run dev")
    print(f"\n🌐 The website will be available at: http://localhost:3000")
    print("=" * 60)

if __name__ == "__main__":
    main()
